// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Profile {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  imageUrl String
  email    String @unique
  userId   String   @unique

  //Relation Of Every Profile With The Server
  servers Server[]

  //Relation of Every Profile As a members
  members Member[]

  //Relation of Every Profile As a members
  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Server {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  imageUrl   String
  inviteCode String @unique

  //Relation With UserProfile
  profileId String  @db.ObjectId
  profile   Profile @relation(fields: [profileId], references: [id])

  //Relation With the members
  members Member[]

  //Relation With the members
  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id   String     @id @default(auto()) @map("_id") @db.ObjectId
  role MemberRole @default(GUEST)

  //Relation With UserProfile
  profileId String  @db.ObjectId
  profile   Profile @relation(fields: [profileId], references: [id])

  //Relation With Server 
  serverId String @db.ObjectId
  server   Server @relation(fields: [serverId], references: [id])

  //Relation With Message
  messages Message[]
  directMessages DirectMessage[]

  //For Better Compatiblity With The Conversations
  conversationsInitiated Conversation[] @relation("MemberOne")
  conversationsReceived Conversation[] @relation("MemberTwo")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id   String      @id @default(auto()) @map("_id") @db.ObjectId
  name String
  type ChannelType @default(TEXT)

  //Relation With UserProfile
  profileId String  @db.ObjectId
  profile   Profile @relation(fields: [profileId], references: [id])

  //Relation With Server 
  serverId String @db.ObjectId
  server   Server @relation(fields: [serverId], references: [id])

  //Relation With Message
  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  content String
  fileUrl String? // Optional: For messages with files

  memberId String @db.ObjectId
  member   Member @relation(fields: [memberId], references: [id])

  channelId String  @db.ObjectId
  channel   Channel @relation(fields: [channelId], references: [id])

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Conversation {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  
  memberOneId   String          @db.ObjectId
  memberOne     Member          @relation("MemberOne", fields: [memberOneId], references: [id])
  
  memberTwoId   String          @db.ObjectId
  memberTwo     Member          @relation("MemberTwo", fields: [memberTwoId], references: [id])
  
  directMessages DirectMessage[]
  
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model DirectMessage {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  content       String
  fileUrl       String?  // Optional: For direct messages with files
  
  memberId      String   @db.ObjectId
  member        Member   @relation(fields: [memberId], references: [id])
  
  conversationId String  @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  
  deleted       Boolean  @default(false)
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
